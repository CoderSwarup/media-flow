// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String       @id @default(uuid())
  clerkId       String    @unique
  name          String?
  email         String    @unique
  profileImage  String?
  tier          String    @default("Free")
  credits       Int       @default(10)

  videos        Video[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Video {
  id            String       @id @default(uuid())
  title         String
  description   String?
  originalUrl   String    
  thumbnailUrl  String?        
  status        VideoStatus     @default(QUEUE)
  captions      Caption[]       
  timelines     Timeline[]      
  analytics     VideoAnalytics? 

  userId        String
  user          User            @relation(fields: [userId], references: [id])

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}



model Caption {
  id            String       @id @default(uuid())
  language      String    
  url           String    
  videoId       String
  video         Video     @relation(fields: [videoId], references: [id])

  createdAt     DateTime  @default(now())
}

model Timeline {
  id            String       @id @default(uuid())
  title         String
  description   String?
  startTime     Float     
  endTime       Float     
  isAIGenerated Boolean   @default(false)
  videoId       String
  video         Video     @relation(fields: [videoId], references: [id])

  createdAt     DateTime  @default(now())
}

// model SharedIframe {
// id            String       @id @default(uuid())
//   iframeUrl     String    
//   restrictions  String?   
//   videoId       String
//   video         Video     @relation(fields: [videoId], references: [id])

//   createdAt     DateTime  @default(now())
// }

model VideoAnalytics {
  id            String       @id @default(uuid())
  averageViewTime Float   @default(0) 
  totalViews    Int       @default(0)
  videoId       String       @unique
  video         Video     @relation(fields: [videoId], references: [id])

  createdAt     DateTime  @default(now())
}

enum VideoStatus {
  QUEUE
  PROCESSING
  PROCESSED
  FAILED
}
